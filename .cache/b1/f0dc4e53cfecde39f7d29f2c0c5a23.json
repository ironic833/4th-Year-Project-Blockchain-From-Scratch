{"id":"Fwqq","dependencies":[{"name":"D:\\Github\\4th-Year-Project-Blockchain-From-Scratch\\package.json","includedInParent":true,"mtime":1680956976097},{"name":"D:\\Github\\4th-Year-Project-Blockchain-From-Scratch\\node_modules\\warning\\package.json","includedInParent":true,"mtime":1680789918206}],"generated":{"js":"\"use strict\";var t=function(){};module.exports=t;"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/warning/browser.js","original":{"line":10,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/warning/browser.js","original":{"line":19,"column":0},"generated":{"line":1,"column":13}},{"source":"../../node_modules/warning/browser.js","name":"warning","original":{"line":19,"column":4},"generated":{"line":1,"column":17}},{"source":"../../node_modules/warning/browser.js","original":{"line":19,"column":14},"generated":{"line":1,"column":19}},{"source":"../../node_modules/warning/browser.js","name":"module","original":{"line":60,"column":0},"generated":{"line":1,"column":32}},{"source":"../../node_modules/warning/browser.js","name":"exports","original":{"line":60,"column":7},"generated":{"line":1,"column":39}},{"source":"../../node_modules/warning/browser.js","name":"warning","original":{"line":60,"column":17},"generated":{"line":1,"column":47}}],"sources":{"../../node_modules/warning/browser.js":"/**\r\n * Copyright 2014-2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * Similar to invariant but only logs a warning if the condition is not met.\r\n * This can be used to log issues in development environments in critical\r\n * paths. Removing the logging code for production environments will keep the\r\n * same logic and follow the same code paths.\r\n */\r\n\r\nvar warning = function() {};\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n  warning = function(condition, format, args) {\r\n    var len = arguments.length;\r\n    args = new Array(len > 2 ? len - 2 : 0);\r\n    for (var key = 2; key < len; key++) {\r\n      args[key - 2] = arguments[key];\r\n    }\r\n    if (format === undefined) {\r\n      throw new Error(\r\n        '`warning(condition, format, ...args)` requires a warning ' +\r\n        'message argument'\r\n      );\r\n    }\r\n\r\n    if (format.length < 10 || (/^[s\\W]*$/).test(format)) {\r\n      throw new Error(\r\n        'The warning format should be able to uniquely identify this ' +\r\n        'warning. Please, use a more descriptive format than: ' + format\r\n      );\r\n    }\r\n\r\n    if (!condition) {\r\n      var argIndex = 0;\r\n      var message = 'Warning: ' +\r\n        format.replace(/%s/g, function() {\r\n          return args[argIndex++];\r\n        });\r\n      if (typeof console !== 'undefined') {\r\n        console.error(message);\r\n      }\r\n      try {\r\n        // This error was thrown as a convenience so that you can use this stack\r\n        // to find the callsite that caused this warning to fire.\r\n        throw new Error(message);\r\n      } catch(x) {}\r\n    }\r\n  };\r\n}\r\n\r\nmodule.exports = warning;\r\n"},"lineCount":null}},"error":null,"hash":"ade100393ea72b056b4e0b8b6b8973b2","cacheData":{"env":{"NODE_ENV":"production"}}}